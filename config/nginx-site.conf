
# harden nginx
server_tokens off;
add_header X-Frame-Options SAMEORIGIN;
add_header X-Content-Type-Options nosniff;
add_header X-XSS-Protection "1; mode=block";

upstream frontend {
    server 127.0.0.1:81;
}

server {
    listen 443 ssl default deferred;
    error_log /dev/stdout info;
    access_log /dev/stdout;

    root /app/backend/public;
    index index.html index.htm index.php;

    # ssl
    ssl_certificate /app/ssl/ssl.crt;
    ssl_certificate_key /app/ssl/ssl.key;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 5m;
    ssl_dhparam /app/ssl/dhparam.pem;
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";
    resolver 8.8.8.8;
    ssl_stapling on;
    ssl_trusted_certificate /app/ssl/ssl.crt;
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

    # a location for all static content
    location /static {
        alias /app/frontend/static;
    }

    # a location for all user generated static content
    location /ugc {
        alias /media/persistent/web;
    }

    # no logs for favicons
    location = /favicon.ico { access_log off; log_not_found off; }

    # expose db admin tool
    location /adminer.php {
        auth_basic "Restricted Content";
        auth_basic_user_file /app/.htpasswd;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME /app/adminer/adminer.php;
        fastcgi_pass unix:/run/php/php7.0-fpm.sock;
    }

    # expose logs
    location ~* ^\/log\/([a-zA-Z\.0-9]*\.log)$ {
        auth_basic "Restricted Content";
        auth_basic_user_file /app/.htpasswd;
        default_type text/plain;
        alias /media/persistent/log/$1;
    }

    location / {
        content_by_lua_block {
            -- call the backend
            local backendResponse = ngx.location.capture("backend", { method = ngx.HTTP_POST, body = ngx.req.read_body() })

            -- detect XHR
            local xhr = false
            if ngx.req.get_headers()["X-Requested-With"] then
                if ngx.req.get_headers()["X-Requested-With"] == "XMLHttpRequest" then
                    xhr = true
                end
            end

            -- send all header received from backend
            for k, v in pairs( backendResponse.header ) do
                ngx.header[k] = v
            end

            -- send location to rendering system, allow backend to override nginx value
            if backendResponse.header['X-Location'] == nil then
                ngx.req.set_header('X-Location', ngx.var.uri)
            else
                ngx.req.set_header('X-Location', backendResponse.header['X-Location'])
            end

            -- show backend error if there is one
            if backendResponse.status ~= 200 then
                ngx.status = backendResponse.status
                ngx.say(backendResponse.body)
                ngx.exit(ngx.HTTP_OK)
            end

            if xhr == true then
                -- just show backend response
                ngx.header["Content-Type"] = "application/json; charset=utf-8"
                ngx.header["Vary"] = "X-Requested-With Content-Type"
                ngx.say(backendResponse.body)
            else
                -- feed backend response to the front-end renderer
                ngx.req.set_header('Content-Type', 'application/json; charset=utf-8')
                ngx.header["Content-Type"] = "text/html; charset=utf-8"
                local frontendResponse = ngx.location.capture("frontend", { body = backendResponse.body })
                ngx.say(frontendResponse.body)
            end
        }
    }

    location frontend {
        proxy_pass http://frontend/;
    }

    location backend {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root/index.php;
        fastcgi_pass unix:/run/php/php7.0-fpm.sock;
    }
}

# redirect all http traffic to https
server {
    listen 80 default_server;
    return 301 https://$host$request_uri;
}
